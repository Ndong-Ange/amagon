#!/usr/bin/env python3
"""
Script d'installation automatique des d√©pendances pour le projet Amagon
Installe les d√©pendances frontend (npm) et backend (pip) pour tous les services
"""

import os
import subprocess
import sys
from pathlib import Path
import time

class Colors:
    """Couleurs pour l'affichage dans le terminal"""
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

class DependencyInstaller:
    def __init__(self):
        self.root_dir = Path(__file__).parent
        self.services = [
            {
                "name": "API Gateway",
                "path": "api-gateway",
                "requirements": "requirements.txt"
            },
            {
                "name": "Auth Service",
                "path": "microservices/auth-service",
                "requirements": "requirements.txt"
            },
            {
                "name": "Product Service",
                "path": "microservices/product-service",
                "requirements": "requirements.txt"
            },
            {
                "name": "Order Service",
                "path": "microservices/order-service",
                "requirements": "requirements.txt"
            },
            {
                "name": "Inventory Service",
                "path": "microservices/inventory-service",
                "requirements": "requirements.txt"
            },
            {
                "name": "Seller Service",
                "path": "microservices/seller-service",
                "requirements": "requirements.txt"
            },
            {
                "name": "Store Service",
                "path": "microservices/store-service",
                "requirements": "requirements.txt"
            }
        ]

    def print_colored(self, message: str, color: str = Colors.ENDC):
        """Affiche un message avec une couleur"""
        print(f"{color}{message}{Colors.ENDC}")

    def print_header(self, message: str):
        """Affiche un en-t√™te"""
        self.print_colored(f"\n{'='*70}", Colors.HEADER)
        self.print_colored(f"  {message}", Colors.HEADER + Colors.BOLD)
        self.print_colored(f"{'='*70}", Colors.HEADER)

    def run_command(self, command: str, cwd: str = None, capture_output: bool = True, shell: bool = False) -> bool:
        """Ex√©cute une commande shell et retourne True si succ√®s"""
        try:
            if isinstance(command, str) and not shell:
                command = command.split()
            
            self.print_colored(f"   Ex√©cution: {command if shell else ' '.join(command)}", Colors.OKCYAN)
            
            result = subprocess.run(
                command,
                cwd=cwd,
                capture_output=capture_output,
                text=True,
                check=True,
                shell=shell
            )
            
            if capture_output and result.stdout:
                # Afficher seulement les derni√®res lignes importantes
                lines = result.stdout.strip().split('\n')
                if len(lines) > 5:
                    self.print_colored(f"   ... ({len(lines)} lignes)", Colors.OKCYAN)
                    for line in lines[-3:]:
                        if line.strip():
                            self.print_colored(f"   {line}", Colors.OKCYAN)
                else:
                    for line in lines:
                        if line.strip():
                            self.print_colored(f"   {line}", Colors.OKCYAN)
            
            return True
            
        except subprocess.CalledProcessError as e:
            self.print_colored(f"‚ùå Erreur lors de l'ex√©cution de '{command if shell else ' '.join(command)}'", Colors.FAIL)
            if e.stderr:
                self.print_colored(f"   Erreur: {e.stderr.strip()}", Colors.FAIL)
            return False
        except FileNotFoundError:
            self.print_colored(f"‚ùå Commande non trouv√©e: {command[0] if not shell else command}", Colors.FAIL)
            return False

    def ask_user_confirmation(self, message: str) -> bool:
        """Demande une confirmation √† l'utilisateur"""
        while True:
            self.print_colored(f"\n{message}", Colors.WARNING)
            response = input(f"{Colors.OKCYAN}Voulez-vous continuer ? (o/n): {Colors.ENDC}").lower().strip()
            
            if response in ['o', 'oui', 'y', 'yes']:
                return True
            elif response in ['n', 'non', 'no']:
                return False
            else:
                self.print_colored("Veuillez r√©pondre par 'o' (oui) ou 'n' (non)", Colors.WARNING)

    def check_prerequisites(self) -> bool:
        """V√©rifie que Node.js, npm et Python sont install√©s"""
        self.print_header("V√©rification des pr√©requis")
        
        prerequisites_ok = True
        missing_prereqs = []
        
        # V√©rifier Python
        try:
            result = subprocess.run([sys.executable, "--version"], capture_output=True, text=True)
            python_version = result.stdout.strip()
            self.print_colored(f"‚úÖ {python_version} trouv√©", Colors.OKGREEN)
        except:
            self.print_colored("‚ùå Python non trouv√©", Colors.FAIL)
            prerequisites_ok = False
            missing_prereqs.append("Python")

        # V√©rifier pip
        try:
            result = subprocess.run([sys.executable, "-m", "pip", "--version"], capture_output=True, text=True)
            pip_version = result.stdout.strip().split('\n')[0]
            self.print_colored(f"‚úÖ {pip_version} trouv√©", Colors.OKGREEN)
        except:
            self.print_colored("‚ùå pip non trouv√©", Colors.FAIL)
            prerequisites_ok = False
            missing_prereqs.append("pip")

        # V√©rifier Node.js
        try:
            result = subprocess.run(["node", "--version"], capture_output=True, text=True)
            node_version = result.stdout.strip()
            self.print_colored(f"‚úÖ Node.js {node_version} trouv√©", Colors.OKGREEN)
        except:
            self.print_colored("‚ùå Node.js non trouv√©", Colors.FAIL)
            prerequisites_ok = False
            missing_prereqs.append("Node.js")

        # V√©rifier npm avec diff√©rentes m√©thodes pour Windows
        npm_found = False
        try:
            # Essayer d'abord avec npm.cmd (Windows)
            result = subprocess.run(["npm.cmd", "--version"], capture_output=True, text=True, shell=True)
            if result.returncode == 0:
                npm_version = result.stdout.strip()
                self.print_colored(f"‚úÖ npm {npm_version} trouv√©", Colors.OKGREEN)
                npm_found = True
        except:
            pass
        
        if not npm_found:
            try:
                # Essayer avec npm
                result = subprocess.run(["npm", "--version"], capture_output=True, text=True, shell=True)
                if result.returncode == 0:
                    npm_version = result.stdout.strip()
                    self.print_colored(f"‚úÖ npm {npm_version} trouv√©", Colors.OKGREEN)
                    npm_found = True
            except:
                pass
        
        if not npm_found:
            self.print_colored("‚ùå npm non trouv√©", Colors.FAIL)
            prerequisites_ok = False
            missing_prereqs.append("npm")

        # Si des pr√©requis manquent, demander confirmation
        if not prerequisites_ok:
            self.print_colored(f"\n‚ö†Ô∏è  Pr√©requis manquants d√©tect√©s:", Colors.WARNING)
            for prereq in missing_prereqs:
                self.print_colored(f"   ‚Ä¢ {prereq}", Colors.FAIL)
            
            self.print_colored(f"\nüìã Instructions d'installation:", Colors.OKBLUE)
            if "Python" in missing_prereqs:
                self.print_colored("   ‚Ä¢ Python: https://www.python.org/downloads/", Colors.OKCYAN)
            if "Node.js" in missing_prereqs or "npm" in missing_prereqs:
                self.print_colored("   ‚Ä¢ Node.js (inclut npm): https://nodejs.org/", Colors.OKCYAN)
            
            if not self.ask_user_confirmation("‚ö†Ô∏è  Certains pr√©requis manquent. L'installation pourrait √©chouer."):
                self.print_colored("‚ùå Installation annul√©e par l'utilisateur", Colors.FAIL)
                return False
            else:
                self.print_colored("‚úÖ Continuation forc√©e par l'utilisateur", Colors.WARNING)

        return True

    def install_frontend_dependencies(self) -> bool:
        """Installe les d√©pendances frontend avec npm"""
        self.print_header("Installation des d√©pendances frontend")
        
        package_json = self.root_dir / "package.json"
        if not package_json.exists():
            self.print_colored("‚ùå package.json non trouv√© dans le r√©pertoire racine", Colors.FAIL)
            return False
        
        self.print_colored("üì¶ Installation des d√©pendances npm...", Colors.OKBLUE)
        
        # Essayer diff√©rentes m√©thodes pour npm sur Windows
        npm_commands = ["npm install", "npm.cmd install"]
        
        for npm_cmd in npm_commands:
            if self.run_command(npm_cmd, cwd=self.root_dir, capture_output=True, shell=True):
                self.print_colored("‚úÖ D√©pendances frontend install√©es avec succ√®s", Colors.OKGREEN)
                return True
        
        self.print_colored("‚ùå √âchec de l'installation des d√©pendances frontend", Colors.FAIL)
        return False

    def install_python_dependencies(self) -> bool:
        """Installe les d√©pendances Python pour tous les services"""
        self.print_header("Installation des d√©pendances Python pour tous les services")
        
        success_count = 0
        total_services = len(self.services)
        
        for service in self.services:
            service_path = self.root_dir / service["path"]
            requirements_file = service_path / service["requirements"]
            
            self.print_colored(f"\nüîß {service['name']}", Colors.OKBLUE)
            
            if not service_path.exists():
                self.print_colored(f"‚ö†Ô∏è  R√©pertoire non trouv√©: {service_path}", Colors.WARNING)
                continue
                
            if not requirements_file.exists():
                self.print_colored(f"‚ö†Ô∏è  {service['requirements']} non trouv√©", Colors.WARNING)
                continue
            
            self.print_colored(f"üì¶ Installation des d√©pendances pour {service['name']}...", Colors.OKBLUE)
            
            # Utiliser pip install avec le chemin complet vers Python
            command = f"{sys.executable} -m pip install -r {service['requirements']}"
            
            if self.run_command(command, cwd=service_path, capture_output=True):
                self.print_colored(f"‚úÖ {service['name']} - D√©pendances install√©es", Colors.OKGREEN)
                success_count += 1
            else:
                self.print_colored(f"‚ùå {service['name']} - √âchec de l'installation", Colors.FAIL)
                
                # Demander si on continue malgr√© l'√©chec
                if not self.ask_user_confirmation(f"L'installation a √©chou√© pour {service['name']}."):
                    self.print_colored("‚ùå Installation interrompue par l'utilisateur", Colors.FAIL)
                    return False
            
            # Petite pause entre les installations
            time.sleep(0.5)
        
        self.print_colored(f"\nüìä R√©sum√©: {success_count}/{total_services} services configur√©s", Colors.OKBLUE)
        return success_count > 0

    def show_summary(self, frontend_success: bool, backend_success: bool):
        """Affiche un r√©sum√© de l'installation"""
        self.print_header("R√©sum√© de l'installation")
        
        if frontend_success:
            self.print_colored("‚úÖ D√©pendances frontend (npm) install√©es", Colors.OKGREEN)
        else:
            self.print_colored("‚ùå √âchec des d√©pendances frontend", Colors.FAIL)
        
        if backend_success:
            self.print_colored("‚úÖ D√©pendances Python install√©es pour tous les services", Colors.OKGREEN)
        else:
            self.print_colored("‚ö†Ô∏è  Certaines d√©pendances Python ont √©chou√©", Colors.WARNING)
        
        if frontend_success and backend_success:
            self.print_colored(f"\nüéâ Installation termin√©e avec succ√®s!", Colors.OKGREEN)
            self.print_colored(f"Vous pouvez maintenant lancer le projet avec:", Colors.OKBLUE)
            self.print_colored(f"  python setup_databases.py", Colors.OKCYAN)
            self.print_colored(f"  python run_project.py", Colors.OKCYAN)
        else:
            self.print_colored(f"\n‚ö†Ô∏è  Installation partiellement r√©ussie", Colors.WARNING)
            self.print_colored(f"V√©rifiez les erreurs ci-dessus et r√©essayez", Colors.WARNING)
            
            if not self.ask_user_confirmation("Voulez-vous continuer malgr√© les erreurs ?"):
                self.print_colored("‚ùå Processus interrompu par l'utilisateur", Colors.FAIL)
                return False

    def run(self) -> bool:
        """Lance l'installation compl√®te"""
        try:
            self.print_colored(f"""
{Colors.HEADER}{Colors.BOLD}
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                üîß AMAGON DEPENDENCY INSTALLER                ‚ïë
‚ïë              Installation automatique v2.0                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
{Colors.ENDC}""")
            
            # V√©rifier les pr√©requis avec confirmation utilisateur
            if not self.check_prerequisites():
                return False
            
            # Installer les d√©pendances frontend
            frontend_success = self.install_frontend_dependencies()
            
            # Si le frontend √©choue, demander confirmation
            if not frontend_success:
                if not self.ask_user_confirmation("L'installation frontend a √©chou√©. Continuer avec le backend ?"):
                    self.print_colored("‚ùå Installation interrompue par l'utilisateur", Colors.FAIL)
                    return False
            
            # Installer les d√©pendances Python
            backend_success = self.install_python_dependencies()
            
            # Afficher le r√©sum√©
            self.show_summary(frontend_success, backend_success)
            
            return frontend_success or backend_success
            
        except KeyboardInterrupt:
            self.print_colored("\n‚ùå Installation interrompue par l'utilisateur (Ctrl+C)", Colors.FAIL)
            return False
        except Exception as e:
            self.print_colored(f"‚ùå Erreur inattendue: {e}", Colors.FAIL)
            return False

def main():
    """Fonction principale"""
    installer = DependencyInstaller()
    success = installer.run()
    
    if success:
        print(f"\n{Colors.OKGREEN}üéâ Installation termin√©e !{Colors.ENDC}")
    else:
        print(f"\n{Colors.FAIL}‚ùå Installation √©chou√©e ou interrompue{Colors.ENDC}")
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
